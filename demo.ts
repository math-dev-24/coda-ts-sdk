import { CodaClient, getAllRows, insertRowsBatch, createRow } from '@math-dev-24/coda-ts-sdk';

async function exempleUtilisation() {
    try {
        // Initialisation du client (charge automatiquement CODA_API_TOKEN depuis .env)
        const coda = new CodaClient();

        console.log('üöÄ D√©marrage de l\'exemple Coda SDK...\n');

        // 1. V√©rifier la connexion
        const user = await coda.whoAmI();
        console.log(`‚úÖ Connect√© en tant que: ${user.name}`);
        console.log(`üìß Email: ${user.loginId}\n`);

        // 2. Lister les documents
        console.log('üìö R√©cup√©ration de vos documents...');
        const docsResponse = await coda.listDocs({ limit: 10 });
        const docs = docsResponse.items || [];

        console.log(`üìÑ ${docs.length} documents trouv√©s:`);
        docs.forEach((doc, index) => {
            console.log(`  ${index + 1}. ${doc.name} (${doc.id})`);
        });

        if (docs.length === 0) {
            console.log('‚ùå Aucun document trouv√©. Cr√©ez d\'abord un document sur coda.io');
            return;
        }

        // 3. Utiliser le premier document trouv√©
        const premierDoc = docs[0];
        console.log(`\nüéØ Utilisation du document: "${premierDoc.name}"`);

        // 4. Lister les tables du document
        console.log('üìä R√©cup√©ration des tables...');
        const tablesResponse = await coda.listTables(premierDoc.id);
        const tables = tablesResponse.items || [];

        console.log(`üóÉÔ∏è  ${tables.length} tables trouv√©es:`);
        tables.forEach((table, index) => {
            console.log(`  ${index + 1}. ${table.name} (${table.rowCount} lignes)`);
        });

        if (tables.length === 0) {
            console.log('‚ùå Aucune table trouv√©e dans ce document.');
            return;
        }

        // 5. Utiliser la premi√®re table
        const premiereTable = tables[0];
        console.log(`\nüìã Utilisation de la table: "${premiereTable.name}"`);

        // 6. R√©cup√©rer les colonnes
        console.log('üèóÔ∏è  R√©cup√©ration des colonnes...');
        const colonnesResponse = await coda.listColumns(premierDoc.id, premiereTable.id);
        const colonnes = colonnesResponse.items || [];

        console.log(`üìù ${colonnes.length} colonnes trouv√©es:`);
        colonnes.forEach((colonne, index) => {
            console.log(`  ${index + 1}. ${colonne.name} (${colonne.format.type})`);
        });

        // 7. R√©cup√©rer quelques lignes avec les noms de colonnes
        console.log('\nüìñ R√©cup√©ration des donn√©es...');
        const lignesResponse = await coda.listRows(premierDoc.id, premiereTable.id, {
            limit: 5,
            useColumnNames: true
        });

        const lignes = lignesResponse.items || [];
        console.log(`üìä ${lignes.length} lignes r√©cup√©r√©es (sur ${premiereTable.rowCount} total):`);

        lignes.forEach((ligne, index) => {
            console.log(`  Ligne ${index + 1}:`, ligne.values);
        });

        // 8. Exemple d'insertion (comment√© pour √©viter de modifier les donn√©es)
        /*
        console.log('\n‚ûï Exemple d\'insertion de donn√©es...');

        // Cr√©er des donn√©es d'exemple
        const nouvellesDonnees = [
          { [premiereColonne]: 'Exemple 1', [deuxiemeColonne]: 'Valeur 1' },
          { [premiereColonne]: 'Exemple 2', [deuxiemeColonne]: 'Valeur 2' }
        ];

        const insertionResponse = await insertRowsBatch(
          coda,
          premierDoc.id,
          premiereTable.id,
          nouvellesDonnees,
          {
            batchSize: 10,
            waitForCompletion: true
          }
        );

        console.log(`‚úÖ ${insertionResponse.length} lignes ins√©r√©es avec succ√®s!`);
        */

        // 9. Exemple avec helper getAllRows pour r√©cup√©rer toutes les donn√©es
        console.log('\nüîÑ R√©cup√©ration de toutes les lignes avec pagination automatique...');
        const toutesLesLignes = await getAllRows(coda, premierDoc.id, premiereTable.id, {
            useColumnNames: true,
            valueFormat: 'simple'
        });

        console.log(`üìà Total de ${toutesLesLignes.length} lignes r√©cup√©r√©es`);

        console.log('\nüéâ Exemple termin√© avec succ√®s!');

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ex√©cution:', error);

        if (error instanceof Error) {
            console.error('Message:', error.message);
            if ('statusCode' in error) {
                console.error('Code de statut:', (error as any).statusCode);
            }
        }
    }
}

// Ex√©cuter l'exemple si ce fichier est lanc√© directement
if (require.main === module) {
    exempleUtilisation();
}

export { exempleUtilisation };